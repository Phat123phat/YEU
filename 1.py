import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
from datetime import datetime
import json
import os
from collections import Counter

class TaiXiuAnalyzer:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Tool Ph√¢n T√≠ch C·∫ßu T√†i X·ªâu Pro")
        
        # T·ª∑ l·ªá 16:10 - thi·∫øt k·∫ø cho m√†n h√¨nh hi·ªán ƒë·∫°i
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        
        # T√≠nh to√°n k√≠ch th∆∞·ªõc c·ª≠a s·ªï theo t·ª∑ l·ªá 16:10
        window_width = min(1600, int(screen_width * 0.9))
        window_height = int(window_width * 10 / 16)
        
        # CƒÉn gi·ªØa c·ª≠a s·ªï
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        self.root.configure(bg='#0f0f0f')
        self.root.minsize(1200, 750)
        
        # C·∫•u h√¨nh style system
        self.setup_modern_style()
        
        # L∆∞u tr·ªØ d·ªØ li·ªáu
        self.history = []
        self.data_file = "taixiu_history.json"
        
        # Load d·ªØ li·ªáu c≈© n·∫øu c√≥
        self.load_data()
        
        self.setup_modern_ui()
        
    def setup_modern_style(self):
        """Thi·∫øt l·∫≠p style hi·ªán ƒë·∫°i v·ªõi m√†u s·∫Øc gradient"""
        self.colors = {
            'bg_primary': '#0f0f0f',      # ƒêen ch·ªß ƒë·∫°o
            'bg_secondary': '#1a1a1a',    # X√°m ƒë·∫≠m
            'bg_tertiary': '#262626',     # X√°m v·ª´a
            'accent_blue': '#3b82f6',     # Xanh d∆∞∆°ng hi·ªán ƒë·∫°i
            'accent_green': '#10b981',    # Xanh l√° hi·ªán ƒë·∫°i
            'accent_orange': '#f59e0b',   # Cam hi·ªán ƒë·∫°i
            'accent_red': '#ef4444',      # ƒê·ªè hi·ªán ƒë·∫°i
            'accent_purple': '#8b5cf6',   # T√≠m hi·ªán ƒë·∫°i
            'text_primary': '#ffffff',    # Tr·∫Øng ch√≠nh
            'text_secondary': '#d1d5db',  # X√°m s√°ng
            'text_muted': '#9ca3af',      # X√°m nh·∫°t
            'success': '#22c55e',         # Xanh th√†nh c√¥ng
            'warning': '#f59e0b',         # V√†ng c·∫£nh b√°o
            'danger': '#ef4444',          # ƒê·ªè nguy hi·ªÉm
        }
        
        self.fonts = {
            'title': ('Inter', 32, 'bold'),
            'header': ('Inter', 20, 'bold'),
            'subheader': ('Inter', 16, 'bold'),
            'body': ('Inter', 14),
            'body_bold': ('Inter', 14, 'bold'),
            'caption': ('Inter', 12),
            'button': ('Inter', 13, 'bold'),
            'mono': ('JetBrains Mono', 13),
            'mono_large': ('JetBrains Mono', 15),
        }
        
        # Configure ttk styles
        style = ttk.Style()
        style.theme_use('clam')
        
        # Configure modern button style
        style.configure('Modern.TButton',
                       background=self.colors['accent_blue'],
                       foreground='white',
                       font=self.fonts['button'],
                       borderwidth=0,
                       focuscolor='none')
        
    def setup_modern_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán hi·ªán ƒë·∫°i v·ªõi layout grid"""
        # Main container v·ªõi padding
        main_container = tk.Frame(self.root, bg=self.colors['bg_primary'])
        main_container.pack(fill=tk.BOTH, expand=True, padx=24, pady=24)
        
        # Header section
        self.setup_modern_header(main_container)
        
        # Main content grid (2x2 layout)
        self.setup_content_grid(main_container)
        
        # Footer
        self.setup_modern_footer(main_container)
        
        # Auto analyze
        self.analyze_patterns()
        
    def setup_modern_header(self, parent):
        """Header hi·ªán ƒë·∫°i v·ªõi gradient effect"""
        header_frame = tk.Frame(parent, bg=self.colors['bg_secondary'], height=120)
        header_frame.pack(fill=tk.X, pady=(0, 24))
        header_frame.pack_propagate(False)
        
        # Title v·ªõi icon
        title_frame = tk.Frame(header_frame, bg=self.colors['bg_secondary'])
        title_frame.pack(expand=True)
        
        title_label = tk.Label(title_frame, 
                              text="üéØ TOOL PH√ÇN T√çCH C·∫¶U T√ÄI X·ªàU PRO",
                              font=self.fonts['title'],
                              fg=self.colors['text_primary'],
                              bg=self.colors['bg_secondary'])
        title_label.pack(pady=20)
        
        # Stats bar v·ªõi cards
        stats_container = tk.Frame(header_frame, bg=self.colors['bg_secondary'])
        stats_container.pack(fill=tk.X, padx=40, pady=(0, 20))
        
        self.setup_stats_cards(stats_container)
        
    def setup_stats_cards(self, parent):
        """T·∫°o c√°c th·∫ª th·ªëng k√™ hi·ªán ƒë·∫°i"""
        stats_data = [
            ('T·ªïng v√°n', '0', self.colors['accent_blue'], 'üìä'),
            ('T√†i', '0 (0%)', self.colors['success'], 'üéØ'),
            ('X·ªâu', '0 (0%)', self.colors['warning'], 'üé≤'),
            ('Streak', 'N/A', self.colors['accent_purple'], 'üî•')
        ]
        
        self.stats_labels = {}
        
        for i, (label, value, color, icon) in enumerate(stats_data):
            # Card container
            card = tk.Frame(parent, bg=self.colors['bg_tertiary'], relief=tk.FLAT)
            card.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=8)
            
            # Card content
            content_frame = tk.Frame(card, bg=self.colors['bg_tertiary'])
            content_frame.pack(expand=True, pady=16, padx=20)
            
            # Icon
            icon_label = tk.Label(content_frame, text=icon, font=('Inter', 24),
                                 fg=color, bg=self.colors['bg_tertiary'])
            icon_label.pack()
            
            # Value
            key = label.lower().replace(' ', '_')
            self.stats_labels[key] = tk.Label(content_frame, text=value,
                                            font=self.fonts['subheader'],
                                            fg=self.colors['text_primary'],
                                            bg=self.colors['bg_tertiary'])
            self.stats_labels[key].pack(pady=(4, 2))
            
            # Label
            tk.Label(content_frame, text=label,
                    font=self.fonts['caption'],
                    fg=self.colors['text_muted'],
                    bg=self.colors['bg_tertiary']).pack()
    
    def setup_content_grid(self, parent):
        """Layout grid 2x2 cho n·ªôi dung ch√≠nh"""
        content_container = tk.Frame(parent, bg=self.colors['bg_primary'])
        content_container.pack(fill=tk.BOTH, expand=True)
        
        # Top row - Input & History
        top_row = tk.Frame(content_container, bg=self.colors['bg_primary'])
        top_row.pack(fill=tk.X, pady=(0, 12))
        
        # Input section (60% width)
        self.setup_input_panel(top_row)
        
        # History section (40% width)
        self.setup_history_panel(top_row)
        
        # Bottom row - Analysis panels
        bottom_row = tk.Frame(content_container, bg=self.colors['bg_primary'])
        bottom_row.pack(fill=tk.BOTH, expand=True, pady=(12, 0))
        
        # Quick recommendation (30%)
        self.setup_recommendation_panel(bottom_row)
        
        # Detailed analysis (40%)
        self.setup_analysis_panel(bottom_row)
        
        # Strategy panel (30%)
        self.setup_strategy_panel(bottom_row)
        
    def setup_input_panel(self, parent):
        """Panel nh·∫≠p li·ªáu hi·ªán ƒë·∫°i"""
        input_panel = tk.Frame(parent, bg=self.colors['bg_secondary'])
        input_panel.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 6))
        
        # Header
        header = tk.Frame(input_panel, bg=self.colors['bg_secondary'], height=50)
        header.pack(fill=tk.X)
        header.pack_propagate(False)
        
        tk.Label(header, text="üìù NH·∫¨P K·∫æT QU·∫¢",
                font=self.fonts['header'],
                fg=self.colors['text_primary'],
                bg=self.colors['bg_secondary']).pack(pady=16)
        
        # Input area
        input_area = tk.Frame(input_panel, bg=self.colors['bg_secondary'])
        input_area.pack(fill=tk.X, padx=24, pady=(0, 24))
        
        # Entry with modern styling
        entry_frame = tk.Frame(input_area, bg=self.colors['bg_secondary'])
        entry_frame.pack(pady=(0, 20))
        
        tk.Label(entry_frame, text="Nh·∫≠p T (T√†i) ho·∫∑c X (X·ªâu):",
                font=self.fonts['body'],
                fg=self.colors['text_secondary'],
                bg=self.colors['bg_secondary']).pack(pady=(0, 8))
        
        self.result_entry = tk.Entry(entry_frame,
                                   font=self.fonts['mono_large'],
                                   width=12, justify='center',
                                   bg=self.colors['bg_tertiary'],
                                   fg=self.colors['text_primary'],
                                   insertbackground=self.colors['text_primary'],
                                   relief=tk.FLAT, bd=0)
        self.result_entry.pack(ipady=8)
        self.result_entry.bind('<Return>', lambda e: self.add_result())
        
        # Quick action buttons
        buttons_frame = tk.Frame(input_area, bg=self.colors['bg_secondary'])
        buttons_frame.pack(pady=(20, 0))
        
        # T√†i button
        tai_btn = tk.Button(buttons_frame, text="üéØ T√ÄI",
                           command=lambda: self.quick_add('T'),
                           bg=self.colors['success'], fg='white',
                           font=self.fonts['button'],
                           relief=tk.FLAT, bd=0,
                           width=12, height=2,
                           cursor='hand2')
        tai_btn.pack(side=tk.LEFT, padx=(0, 8))
        
        # X·ªâu button
        xiu_btn = tk.Button(buttons_frame, text="üé≤ X·ªàU",
                           command=lambda: self.quick_add('X'),
                           bg=self.colors['warning'], fg='white',
                           font=self.fonts['button'],
                           relief=tk.FLAT, bd=0,
                           width=12, height=2,
                           cursor='hand2')
        xiu_btn.pack(side=tk.LEFT, padx=8)
        
        # Action buttons
        actions_frame = tk.Frame(input_area, bg=self.colors['bg_secondary'])
        actions_frame.pack(pady=(20, 0))
        
        delete_btn = tk.Button(actions_frame, text="üóëÔ∏è X√≥a cu·ªëi",
                              command=self.remove_last,
                              bg=self.colors['danger'], fg='white',
                              font=self.fonts['caption'],
                              relief=tk.FLAT, bd=0,
                              width=12, cursor='hand2')
        delete_btn.pack(side=tk.LEFT, padx=(0, 8))
        
        reset_btn = tk.Button(actions_frame, text="üîÑ Reset",
                             command=self.reset_data,
                             bg=self.colors['text_muted'], fg='white',
                             font=self.fonts['caption'],
                             relief=tk.FLAT, bd=0,
                             width=12, cursor='hand2')
        reset_btn.pack(side=tk.LEFT, padx=8)
        
    def setup_history_panel(self, parent):
        """Panel l·ªãch s·ª≠ hi·ªán ƒë·∫°i"""
        history_panel = tk.Frame(parent, bg=self.colors['bg_secondary'])
        history_panel.pack(side=tk.LEFT, fill=tk.BOTH, padx=(6, 0))
        
        # Header
        header = tk.Frame(history_panel, bg=self.colors['bg_secondary'], height=50)
        header.pack(fill=tk.X)
        header.pack_propagate(False)
        
        tk.Label(header, text="üìä L·ªäCH S·ª¨ 10 V√ÅN",
                font=self.fonts['header'],
                fg=self.colors['text_primary'],
                bg=self.colors['bg_secondary']).pack(pady=16)
        
        # History display
        history_display = tk.Frame(history_panel, bg=self.colors['bg_tertiary'])
        history_display.pack(fill=tk.BOTH, expand=True, padx=24, pady=(0, 24))
        
        self.history_label = tk.Label(history_display,
                                     text="Ch∆∞a c√≥ d·ªØ li·ªáu",
                                     font=self.fonts['mono'],
                                     fg=self.colors['text_secondary'],
                                     bg=self.colors['bg_tertiary'],
                                     wraplength=300,
                                     justify=tk.CENTER)
        self.history_label.pack(expand=True, pady=20)
        
    def setup_recommendation_panel(self, parent):
        """Panel khuy·∫øn ngh·ªã hi·ªán ƒë·∫°i"""
        rec_panel = tk.Frame(parent, bg=self.colors['bg_secondary'])
        rec_panel.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 6))
        
        # Header
        header = tk.Frame(rec_panel, bg=self.colors['bg_secondary'], height=50)
        header.pack(fill=tk.X)
        header.pack_propagate(False)
        
        tk.Label(header, text="üéØ KHUY·∫æN NGH·ªä",
                font=self.fonts['header'],
                fg=self.colors['text_primary'],
                bg=self.colors['bg_secondary']).pack(pady=16)
        
        # Content area
        content_area = tk.Frame(rec_panel, bg=self.colors['bg_secondary'])
        content_area.pack(fill=tk.BOTH, expand=True, padx=20, pady=(0, 20))
        
        # Main recommendation card
        self.rec_card = tk.Frame(content_area, bg=self.colors['bg_tertiary'])
        self.rec_card.pack(fill=tk.X, pady=(0, 16))
        
        self.rec_action_label = tk.Label(self.rec_card,
                                        text="Ch∆∞a c√≥ khuy·∫øn ngh·ªã",
                                        font=self.fonts['subheader'],
                                        fg=self.colors['text_primary'],
                                        bg=self.colors['bg_tertiary'])
        self.rec_action_label.pack(pady=(16, 4))
        
        self.rec_rate_label = tk.Label(self.rec_card,
                                      text="",
                                      font=self.fonts['body'],
                                      fg=self.colors['text_secondary'],
                                      bg=self.colors['bg_tertiary'])
        self.rec_rate_label.pack(pady=(0, 16))
        
        # Stats grid
        stats_grid = tk.Frame(content_area, bg=self.colors['bg_secondary'])
        stats_grid.pack(fill=tk.X)
        
        # Confidence
        conf_frame = tk.Frame(stats_grid, bg=self.colors['bg_tertiary'])
        conf_frame.pack(fill=tk.X, pady=(0, 8))
        
        tk.Label(conf_frame, text="ƒê·ªô tin c·∫≠y:",
                font=self.fonts['caption'],
                fg=self.colors['text_muted'],
                bg=self.colors['bg_tertiary']).pack(pady=(8, 2))
        
        self.confidence_label = tk.Label(conf_frame, text="",
                                        font=self.fonts['body_bold'],
                                        fg=self.colors['text_primary'],
                                        bg=self.colors['bg_tertiary'])
        self.confidence_label.pack(pady=(0, 8))
        
        # Risk
        risk_frame = tk.Frame(stats_grid, bg=self.colors['bg_tertiary'])
        risk_frame.pack(fill=tk.X)
        
        tk.Label(risk_frame, text="M·ª©c r·ªßi ro:",
                font=self.fonts['caption'],
                fg=self.colors['text_muted'],
                bg=self.colors['bg_tertiary']).pack(pady=(8, 2))
        
        self.risk_label = tk.Label(risk_frame, text="",
                                  font=self.fonts['body_bold'],
                                  fg=self.colors['text_primary'],
                                  bg=self.colors['bg_tertiary'])
        self.risk_label.pack(pady=(0, 8))
        
    def setup_analysis_panel(self, parent):
        """Panel ph√¢n t√≠ch chi ti·∫øt"""
        analysis_panel = tk.Frame(parent, bg=self.colors['bg_secondary'])
        analysis_panel.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=6)
        
        # Header
        header = tk.Frame(analysis_panel, bg=self.colors['bg_secondary'], height=50)
        header.pack(fill=tk.X)
        header.pack_propagate(False)
        
        tk.Label(header, text="üìà PH√ÇN T√çCH C·∫¶U",
                font=self.fonts['header'],
                fg=self.colors['text_primary'],
                bg=self.colors['bg_secondary']).pack(pady=16)
        
        # Analysis text area
        self.analysis_text = scrolledtext.ScrolledText(
            analysis_panel,
            font=self.fonts['mono'],
            bg=self.colors['bg_tertiary'],
            fg=self.colors['text_secondary'],
            insertbackground=self.colors['text_primary'],
            selectbackground=self.colors['accent_blue'],
            relief=tk.FLAT, bd=0,
            wrap=tk.WORD
        )
        self.analysis_text.pack(fill=tk.BOTH, expand=True, padx=20, pady=(0, 20))
        
    def setup_strategy_panel(self, parent):
        """Panel chi·∫øn l∆∞·ª£c"""
        strategy_panel = tk.Frame(parent, bg=self.colors['bg_secondary'])
        strategy_panel.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(6, 0))
        
        # Header
        header = tk.Frame(strategy_panel, bg=self.colors['bg_secondary'], height=50)
        header.pack(fill=tk.X)
        header.pack_propagate(False)
        
        tk.Label(header, text="üîÆ CHI·∫æN L∆Ø·ª¢C",
                font=self.fonts['header'],
                fg=self.colors['text_primary'],
                bg=self.colors['bg_secondary']).pack(pady=16)
        
        # Strategy text area
        self.strategy_text = scrolledtext.ScrolledText(
            strategy_panel,
            font=self.fonts['mono'],
            bg=self.colors['bg_tertiary'],
            fg=self.colors['text_secondary'],
            insertbackground=self.colors['text_primary'],
            selectbackground=self.colors['accent_blue'],
            relief=tk.FLAT, bd=0,
            wrap=tk.WORD
        )
        self.strategy_text.pack(fill=tk.BOTH, expand=True, padx=20, pady=(0, 20))
        
    def setup_modern_footer(self, parent):
        """Footer hi·ªán ƒë·∫°i"""
        footer = tk.Frame(parent, bg=self.colors['bg_secondary'], height=50)
        footer.pack(fill=tk.X, pady=(24, 0))
        footer.pack_propagate(False)
        
        footer_text = f"üí° C·∫≠p nh·∫≠t: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')} | üéØ Tool ph√¢n t√≠ch T√†i X·ªâu chuy√™n nghi·ªáp | Made with ‚ù§Ô∏è"
        tk.Label(footer, text=footer_text,
                font=self.fonts['caption'],
                fg=self.colors['text_muted'],
                bg=self.colors['bg_secondary']).pack(expand=True)
    
    def quick_add(self, result):
        """Th√™m k·∫øt qu·∫£ nhanh"""
        self.result_entry.delete(0, tk.END)
        self.result_entry.insert(0, result)
        self.add_result()
        
    def add_result(self):
        result = self.result_entry.get().upper().strip()
        if not result:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p k·∫øt qu·∫£!")
            return
            
        if result not in ['T', 'X', 'T√ÄI', 'X·ªàU']:
            messagebox.showerror("L·ªói", "Ch·ªâ nh·∫≠p T (T√†i) ho·∫∑c X (X·ªâu)!")
            return
            
        # Chu·∫©n h√≥a
        if result in ['T√ÄI', 'T']:
            result = 'T'
        else:
            result = 'X'
            
        self.history.append({
            'result': result,
            'time': datetime.now().strftime('%H:%M:%S'),
            'date': datetime.now().strftime('%d/%m/%Y')
        })
        
        # Gi·ªØ ch·ªâ 50 k·∫øt qu·∫£ g·∫ßn nh·∫•t
        if len(self.history) > 50:
            self.history = self.history[-50:]
            
        self.result_entry.delete(0, tk.END)
        self.update_display()
        self.save_data()
        
    def remove_last(self):
        if self.history:
            self.history.pop()
            self.update_display()
            self.save_data()
        else:
            messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ x√≥a!")
            
    def reset_data(self):
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô d·ªØ li·ªáu?"):
            self.history = []
            self.update_display()
            self.save_data()
            
    def update_display(self):
        # Update statistics
        self.update_statistics()
        
        # Update history display
        self.update_history_display()
        
        # Update analysis
        self.analyze_patterns()
        
    def update_statistics(self):
        """C·∫≠p nh·∫≠t th·ªëng k√™ header"""
        total = len(self.history)
        tai_count = sum(1 for item in self.history if item['result'] == 'T')
        xiu_count = total - tai_count
        
        # Streak hi·ªán t·∫°i
        streak = self.get_current_streak()
        
        self.stats_labels['t·ªïng_v√°n'].config(text=str(total))
        
        if total > 0:
            tai_percent = (tai_count / total) * 100
            xiu_percent = (xiu_count / total) * 100
            self.stats_labels['t√†i'].config(text=f"{tai_count} ({tai_percent:.1f}%)")
            self.stats_labels['x·ªâu'].config(text=f"{xiu_count} ({xiu_percent:.1f}%)")
        else:
            self.stats_labels['t√†i'].config(text="0 (0%)")
            self.stats_labels['x·ªâu'].config(text="0 (0%)")
            
        self.stats_labels['streak'].config(text=streak)
        
    def update_history_display(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã l·ªãch s·ª≠"""
        recent_10 = [item['result'] for item in self.history[-10:]]
        if recent_10:
            # T·∫°o display string v·ªõi emoji
            history_display = []
            for result in recent_10:
                symbol = "üéØ" if result == 'T' else "üé≤"
                history_display.append(f"{symbol}")
            
            history_str = "  ".join(history_display)
            full_text = f"G·∫ßn nh·∫•t: {history_str}\n\n"
            
            # Th√™m th√¥ng tin chi ti·∫øt
            if len(recent_10) >= 3:
                full_text += f"3 v√°n: {' ‚Üí '.join(recent_10[-3:])}\n"
            if len(recent_10) >= 5:
                full_text += f"5 v√°n: {' ‚Üí '.join(recent_10[-5:])}\n"
            
            self.history_label.config(text=full_text)
        else:
            self.history_label.config(text="Ch∆∞a c√≥ d·ªØ li·ªáu")
    
    def get_current_streak(self):
        """L·∫•y streak hi·ªán t·∫°i"""
        if not self.history:
            return "N/A"
            
        recent_10 = [item['result'] for item in self.history[-10:]]
        if not recent_10:
            return "N/A"
            
        current = recent_10[-1]
        count = 1
        
        for i in range(len(recent_10) - 2, -1, -1):
            if recent_10[i] == current:
                count += 1
            else:
                break
                
        return f"{count} {current}"
        
    def analyze_patterns(self):
        if len(self.history) < 3:
            self.analysis_text.delete(1.0, tk.END)
            self.analysis_text.insert(tk.END, "‚è≥ C·∫ßn √≠t nh·∫•t 3 k·∫øt qu·∫£ ƒë·ªÉ ph√¢n t√≠ch...\n\nüìù H√£y nh·∫≠p th√™m k·∫øt qu·∫£ ƒë·ªÉ c√≥ ph√¢n t√≠ch chi ti·∫øt.")
            
            self.strategy_text.delete(1.0, tk.END)
            self.strategy_text.insert(tk.END, "‚è≥ Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ƒë∆∞a ra chi·∫øn l∆∞·ª£c...\n\nüéØ Nh·∫≠p th√™m k·∫øt qu·∫£ ƒë·ªÉ nh·∫≠n khuy·∫øn ngh·ªã.")
            
            self.update_recommendation(None)
            return
            
        recent_10 = [item['result'] for item in self.history[-10:]]
        recent_5 = recent_10[-5:] if len(recent_10) >= 5 else recent_10
        recent_3 = recent_10[-3:]
        
        analysis = self.get_pattern_analysis(recent_10, recent_5, recent_3)
        strategies, recommendation = self.get_strategies(recent_10, recent_5, recent_3)
        
        # Hi·ªÉn th·ªã ph√¢n t√≠ch
        self.analysis_text.delete(1.0, tk.END)
        self.analysis_text.insert(tk.END, analysis)
        
        # Hi·ªÉn th·ªã chi·∫øn l∆∞·ª£c
        self.strategy_text.delete(1.0, tk.END)
        self.strategy_text.insert(tk.END, strategies)
        
        # C·∫≠p nh·∫≠t khuy·∫øn ngh·ªã
        self.update_recommendation(recommendation)
        
    def update_recommendation(self, recommendation):
        """C·∫≠p nh·∫≠t khuy·∫øn ngh·ªã"""
        if recommendation:
            self.rec_action_label.config(text=f"üéØ {recommendation['action']}")
            self.rec_rate_label.config(text=f"üìä T·ª∑ l·ªá th·∫Øng: {recommendation['win_rate']}%")
            
            # Confidence
            win_rate = recommendation['win_rate']
            if win_rate >= 85:
                confidence = "R·∫§T CAO ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"
                card_color = self.colors['success']
            elif win_rate >= 75:
                confidence = "CAO ‚≠ê‚≠ê‚≠ê‚≠ê"
                card_color = self.colors['accent_blue']
            elif win_rate >= 65:
                confidence = "TRUNG B√åNH ‚≠ê‚≠ê‚≠ê"
                card_color = self.colors['warning']
            else:
                confidence = "TH·∫§P ‚≠ê‚≠ê"
                card_color = self.colors['danger']
                
            self.confidence_label.config(text=confidence)
            self.risk_label.config(text=recommendation['risk'])
            
            # Update card color
            self.rec_card.config(bg=card_color)
            self.rec_action_label.config(bg=card_color, fg='white')
            self.rec_rate_label.config(bg=card_color, fg='white')
            
        else:
            self.rec_action_label.config(text="‚ö†Ô∏è KH√îNG C√ì C·∫¶U R√ï")
            self.rec_rate_label.config(text="T·ª∑ l·ªá th·∫Øng: 50% (may r·ªßi)")
            self.confidence_label.config(text="KH√îNG X√ÅC ƒê·ªäNH")
            self.risk_label.config(text="üî¥ CAO")
            
            # Red card for no recommendation
            self.rec_card.config(bg=self.colors['danger'])
            self.rec_action_label.config(bg=self.colors['danger'], fg='white')
            self.rec_rate_label.config(bg=self.colors['danger'], fg='white')
    
    def get_pattern_analysis(self, recent_10, recent_5, recent_3):
        """Ph√¢n t√≠ch c√°c m·∫´u c·∫ßu"""
        analysis = []
        analysis.append("üîç PH√ÇN T√çCH C·∫¶U CHI TI·∫æT")
        analysis.append("=" * 50)
        analysis.append(f"üìä 10 v√°n: {' ‚Üí '.join(recent_10)}")
        analysis.append(f"üìä 5 v√°n:  {' ‚Üí '.join(recent_5)}")
        analysis.append(f"üìä 3 v√°n:  {' ‚Üí '.join(recent_3)}")
        analysis.append("")
        
        # Ph√¢n t√≠ch c√°c lo·∫°i c·∫ßu
        found_patterns = []
        
        # 1. C·∫ßu 1-1 (Lu√¢n phi√™n)
        if self.check_alternating_pattern(recent_10):
            found_patterns.append("‚úÖ C·∫¶U 1-1: Ph√°t hi·ªán c·∫ßu lu√¢n phi√™n T-X")
            
        # 2. C·∫ßu b·ªát
        consecutive_count = self.get_consecutive_count(recent_10)
        if consecutive_count >= 3:
            found_patterns.append(f"üî• C·∫¶U B·ªÜT: {consecutive_count} v√°n li√™n ti·∫øp")
            
        # 3. C·∫ßu 2-1
        if self.check_2_1_pattern(recent_5):
            found_patterns.append("‚ö° C·∫¶U 2-1: Ph√°t hi·ªán m·∫´u 2-1")
            
        # 4. C·∫ßu 3-1
        if self.check_3_1_pattern(recent_10):
            found_patterns.append("üéØ C·∫¶U 3-1: Ph√°t hi·ªán m·∫´u 3-1")
            
        # 5. C·∫ßu ƒë·ªëi x·ª©ng
        if self.check_symmetric_pattern(recent_10):
            found_patterns.append("üîÑ C·∫¶U ƒê·ªêI X·ª®NG: T-X-X-T ho·∫∑c X-T-T-X")
            
        # 6. C·∫ßu 2-2
        if self.check_2_2_pattern(recent_10):
            found_patterns.append("üìà C·∫¶U 2-2: M·∫´u TT-XX lu√¢n phi√™n")
            
        if found_patterns:
            analysis.append("üéØ C√ÅC C·∫¶U PH√ÅT HI·ªÜN:")
            analysis.extend([f"  ‚Ä¢ {pattern}" for pattern in found_patterns])
        else:
            analysis.append("‚ùå Kh√¥ng ph√°t hi·ªán c·∫ßu r√µ r√†ng")
            
        # Th·ªëng k√™ t·ªïng quan
        analysis.append("")
        analysis.append("üìä TH·ªêNG K√ä:")
        analysis.append("-" * 30)
        tai_count = recent_10.count('T')
        xiu_count = recent_10.count('X')
        analysis.append(f"üéØ T√†i: {tai_count}/{len(recent_10)} ({tai_count/len(recent_10)*100:.1f}%)")
        analysis.append(f"üé≤ X·ªâu: {xiu_count}/{len(recent_10)} ({xiu_count/len(recent_10)*100:.1f}%)")
        
        # Xu h∆∞·ªõng
        if tai_count > xiu_count + 2:
            analysis.append("üìà XU H∆Ø·ªöNG: T√†i ƒëang chi·∫øm ∆∞u th·∫ø")
        elif xiu_count > tai_count + 2:
            analysis.append("üìâ XU H∆Ø·ªöNG: X·ªâu ƒëang chi·∫øm ∆∞u th·∫ø")
        else:
            analysis.append("‚öñÔ∏è XU H∆Ø·ªöNG: C√¢n b·∫±ng")
            
        return "\n".join(analysis)
        
    def get_strategies(self, recent_10, recent_5, recent_3):
        """ƒê∆∞a ra chi·∫øn l∆∞·ª£c v√† khuy·∫øn ngh·ªã"""
        strategies = []
        strategies.append("üîÆ CHI·∫æN L∆Ø·ª¢C & KHUY·∫æN NGH·ªä")
        strategies.append("=" * 50)
        
        recommendations = []
        
        # D·ª±a tr√™n c·∫ßu b·ªát
        consecutive = self.get_consecutive_count(recent_10)
        if consecutive >= 4:
            opposite = 'X' if recent_3[-1] == 'T' else 'T'
            win_rate = min(85 + (consecutive - 4) * 3, 95)
            recommendations.append({
                'action': f"C∆Ø·ª¢C {opposite}",
                'reason': f"C·∫ßu b·ªát {consecutive} v√°n",
                'win_rate': win_rate,
                'risk': 'TH·∫§P' if consecutive >= 5 else 'TRUNG B√åNH',
                'strategy': 'G·∫•p th·∫øp khi thua'
            })
            
        # D·ª±a tr√™n c·∫ßu lu√¢n phi√™n
        if self.check_alternating_pattern(recent_5):
            next_pred = 'X' if recent_3[-1] == 'T' else 'T'
            recommendations.append({
                'action': f"C∆Ø·ª¢C {next_pred}",
                'reason': "C·∫ßu lu√¢n phi√™n 1-1",
                'win_rate': 72,
                'risk': 'TRUNG B√åNH',
                'strategy': 'C∆∞·ª£c ƒë·ªÅu ƒë·∫∑n'
            })
            
        # D·ª±a tr√™n c·∫ßu 2-1
        if self.check_2_1_pattern(recent_5):
            pattern_end = recent_5[-3:]
            if pattern_end in [['T', 'T', 'X'], ['X', 'X', 'T']]:
                next_pred = pattern_end[0]
                recommendations.append({
                    'action': f"C∆Ø·ª¢C {next_pred}",
                    'reason': "C·∫ßu 2-1 l·∫∑p l·∫°i",
                    'win_rate': 75,
                    'risk': 'TRUNG B√åNH',
                    'strategy': 'Theo chu k·ª≥'
                })
                
        # D·ª±a tr√™n t·∫ßn su·∫•t
        tai_count = recent_10.count('T')
        xiu_count = recent_10.count('X')
        
        if tai_count >= 7:
            recommendations.append({
                'action': "C∆Ø·ª¢C X",
                'reason': f"T√†i qu√° nhi·ªÅu ({tai_count}/10)",
                'win_rate': 80,
                'risk': 'TH·∫§P',
                'strategy': 'C√¢n b·∫±ng t·∫ßn su·∫•t'
            })
        elif xiu_count >= 7:
            recommendations.append({
                'action': "C∆Ø·ª¢C T",
                'reason': f"X·ªâu qu√° nhi·ªÅu ({xiu_count}/10)",
                'win_rate': 80,
                'risk': 'TH·∫§P',
                'strategy': 'C√¢n b·∫±ng t·∫ßn su·∫•t'
            })
            
        # Hi·ªÉn th·ªã khuy·∫øn ngh·ªã
        if recommendations:
            recommendations.sort(key=lambda x: x['win_rate'], reverse=True)
            
            strategies.append("üèÜ TOP KHUY·∫æN NGH·ªä:")
            strategies.append("")
            
            for i, rec in enumerate(recommendations[:3], 1):
                icon = "üî•" if rec['win_rate'] >= 80 else "‚ö°" if rec['win_rate'] >= 70 else "üí°"
                risk_icon = {"TH·∫§P": "üü¢", "TRUNG B√åNH": "üü°", "CAO": "üî¥"}[rec['risk']]
                
                strategies.append(f"{icon} #{i}: {rec['action']}")
                strategies.append(f"   üìà T·ª∑ l·ªá: {rec['win_rate']}%")
                strategies.append(f"   üìù L√Ω do: {rec['reason']}")
                strategies.append(f"   {risk_icon} R·ªßi ro: {rec['risk']}")
                strategies.append("")
                
            # Quy·∫øt ƒë·ªãnh cu·ªëi
            best = recommendations[0]
            strategies.append("üéØ QUY·∫æT ƒê·ªäNH:")
            strategies.append(f"‚úÖ {best['action']}")
            strategies.append(f"üìä T·ª∑ l·ªá th·∫Øng: {best['win_rate']}%")
            strategies.append(f"üõ°Ô∏è R·ªßi ro: {best['risk']}")
            
        else:
            strategies.append("‚ö†Ô∏è KH√îNG C√ì C·∫¶U R√ï R√ÄNG")
            strategies.append("")
            strategies.append("üìã Khuy·∫øn ngh·ªã:")
            strategies.append("‚Ä¢ NGH·ªà CH∆†I ho·∫∑c TEST NH·ªé")
            strategies.append("‚Ä¢ Ch·ªù c·∫ßu r√µ r√†ng h∆°n")
            strategies.append("‚Ä¢ Kh√¥ng n√™n c∆∞·ª£c l·ªõn")
            
        strategies.append("")
        strategies.append("üí∞ QU·∫¢N L√ù V·ªêN:")
        strategies.append("-" * 30)
        
        if recommendations and recommendations[0]['win_rate'] >= 80:
            strategies.append("‚Ä¢ C√≥ th·ªÉ tƒÉng 20-30% ti·ªÅn c∆∞·ª£c")
            strategies.append("‚Ä¢ Stoploss sau 2 v√°n thua")
            strategies.append("‚Ä¢ G·∫•p th·∫øp khi c√≥ c·∫ßu m·∫°nh")
        elif recommendations and recommendations[0]['win_rate'] >= 70:
            strategies.append("‚Ä¢ Gi·ªØ m·ª©c c∆∞·ª£c b√¨nh th∆∞·ªùng")
            strategies.append("‚Ä¢ Stoploss sau 3 v√°n thua")
            strategies.append("‚Ä¢ Theo d√µi c·∫©n th·∫≠n")
        else:
            strategies.append("‚Ä¢ Ch·ªâ c∆∞·ª£c 50% m·ª©c b√¨nh th∆∞·ªùng")
            strategies.append("‚Ä¢ Ngh·ªâ n·∫øu thua 2 v√°n li√™n ti·∫øp")
            strategies.append("‚Ä¢ Ch·ªù t√≠n hi·ªáu r√µ r√†ng")
            
        strategies.append("")
        strategies.append("‚ö†Ô∏è L∆ØU √ù AN TO√ÄN:")
        strategies.append("üö´ Kh√¥ng all-in d√π t·ª∑ l·ªá cao")
        strategies.append("üß† Gi·ªØ t√¢m l√Ω ·ªïn ƒë·ªãnh")
        strategies.append("üò¥ Ngh·ªâ khi m·ªát m·ªèi")
        strategies.append("üìù Ghi ch√©p ƒë·ªÉ r√∫t kinh nghi·ªám")
        
        return "\n".join(strategies), recommendations[0] if recommendations else None
        
    # Pattern checking methods
    def check_alternating_pattern(self, sequence):
        """Ki·ªÉm tra c·∫ßu lu√¢n phi√™n"""
        if len(sequence) < 4:
            return False
        for i in range(len(sequence) - 1):
            if sequence[i] == sequence[i + 1]:
                return False
        return True
        
    def get_consecutive_count(self, sequence):
        """ƒê·∫øm s·ªë v√°n li√™n ti·∫øp c√πng k·∫øt qu·∫£"""
        if not sequence:
            return 0
        count = 1
        current = sequence[-1]
        for i in range(len(sequence) - 2, -1, -1):
            if sequence[i] == current:
                count += 1
            else:
                break
        return count
        
    def check_2_1_pattern(self, sequence):
        """Ki·ªÉm tra c·∫ßu 2-1"""
        if len(sequence) < 3:
            return False
        seq_str = ''.join(sequence[-3:])
        return seq_str in ['TTX', 'XXX', 'TXT', 'XTX']
        
    def check_3_1_pattern(self, sequence):
        """Ki·ªÉm tra c·∫ßu 3-1"""
        if len(sequence) < 4:
            return False
        seq_str = ''.join(sequence[-4:])
        return seq_str in ['TTTX', 'XXXT']
        
    def check_symmetric_pattern(self, sequence):
        """Ki·ªÉm tra c·∫ßu ƒë·ªëi x·ª©ng"""
        if len(sequence) < 4:
            return False
        for i in range(len(sequence) - 3):
            subseq = sequence[i:i+4]
            if subseq in [['T', 'X', 'X', 'T'], ['X', 'T', 'T', 'X']]:
                return True
        return False
        
    def check_2_2_pattern(self, sequence):
        """Ki·ªÉm tra c·∫ßu 2-2"""
        if len(sequence) < 4:
            return False
        for i in range(len(sequence) - 3):
            subseq = sequence[i:i+4]
            if subseq in [['T', 'T', 'X', 'X'], ['X', 'X', 'T', 'T']]:
                return True
        return False
        
    def save_data(self):
        """L∆∞u d·ªØ li·ªáu ra file"""
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.history, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"L·ªói l∆∞u d·ªØ li·ªáu: {e}")
            
    def load_data(self):
        """T·∫£i d·ªØ li·ªáu t·ª´ file"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    self.history = json.load(f)
        except Exception as e:
            print(f"L·ªói ƒë·ªçc d·ªØ li·ªáu: {e}")
            self.history = []
            
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        self.root.mainloop()

if __name__ == "__main__":
    app = TaiXiuAnalyzer()
    app.run()