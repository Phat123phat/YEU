import numpy as np
import librosa
import soundfile as sf
import argparse
import os
from pathlib import Path

class VocalRemover:
    def __init__(self):
        """
        Kh·ªüi t·∫°o Vocal Remover tool
        """
        self.supported_formats = ['.wav', '.mp3', '.flac', '.m4a', '.ogg']
    
    def remove_vocals_center_channel(self, audio_data, sample_rate):
        """
        Lo·∫°i b·ªè vocal b·∫±ng ph∆∞∆°ng ph√°p center channel extraction
        
        Args:
            audio_data: numpy array ch·ª©a d·ªØ li·ªáu audio (stereo)
            sample_rate: t·∫ßn s·ªë l·∫•y m·∫´u
            
        Returns:
            numpy array: audio ƒë√£ lo·∫°i b·ªè vocal
        """
        if len(audio_data.shape) == 1:
            print("‚ö†Ô∏è  File audio l√† mono, kh√¥ng th·ªÉ lo·∫°i b·ªè vocal")
            return audio_data
        
        if audio_data.shape[0] != 2:
            print("‚ö†Ô∏è  File audio kh√¥ng ph·∫£i stereo, chuy·ªÉn ƒë·ªïi...")
            # N·∫øu c√≥ nhi·ªÅu h∆°n 2 channel, ch·ªâ l·∫•y 2 channel ƒë·∫ßu
            audio_data = audio_data[:2, :]
        
        # L·∫•y left v√† right channel
        left_channel = audio_data[0, :]
        right_channel = audio_data[1, :]
        
        # Lo·∫°i b·ªè vocal b·∫±ng c√°ch tr·ª´ left - right
        # Vocal th∆∞·ªùng ·ªü center (gi·ªëng nhau ·ªü c·∫£ 2 channel)
        vocal_removed = left_channel - right_channel
        
        return vocal_removed
    
    def remove_vocals_spectral(self, audio_data, sample_rate):
        """
        Lo·∫°i b·ªè vocal b·∫±ng ph∆∞∆°ng ph√°p spectral subtraction (n√¢ng cao h∆°n)
        
        Args:
            audio_data: numpy array ch·ª©a d·ªØ li·ªáu audio (stereo)
            sample_rate: t·∫ßn s·ªë l·∫•y m·∫´u
            
        Returns:
            numpy array: audio ƒë√£ lo·∫°i b·ªè vocal
        """
        if len(audio_data.shape) == 1:
            return audio_data
        
        if audio_data.shape[0] != 2:
            audio_data = audio_data[:2, :]
        
        left_channel = audio_data[0, :]
        right_channel = audio_data[1, :]
        
        # Chuy·ªÉn ƒë·ªïi sang domain t·∫ßn s·ªë
        left_stft = librosa.stft(left_channel)
        right_stft = librosa.stft(right_channel)
        
        # T√≠nh to√°n phase difference
        phase_diff = np.angle(left_stft) - np.angle(right_stft)
        
        # Lo·∫°i b·ªè nh·ªØng t·∫ßn s·ªë c√≥ phase difference nh·ªè (vocal th∆∞·ªùng c√≥ phase gi·ªëng nhau)
        mask = np.abs(phase_diff) > 0.5  # Threshold c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh
        
        # √Åp d·ª•ng mask
        vocal_removed_stft = (left_stft - right_stft) * mask
        
        # Chuy·ªÉn ng∆∞·ª£c v·ªÅ time domain
        vocal_removed = librosa.istft(vocal_removed_stft)
        
        return vocal_removed
    
    def enhance_audio(self, audio_data, sample_rate):
        """
        C·∫£i thi·ªán ch·∫•t l∆∞·ª£ng audio sau khi lo·∫°i b·ªè vocal
        
        Args:
            audio_data: numpy array
            sample_rate: t·∫ßn s·ªë l·∫•y m·∫´u
            
        Returns:
            numpy array: audio ƒë√£ ƒë∆∞·ª£c c·∫£i thi·ªán
        """
        # Normalize audio
        audio_data = audio_data / np.max(np.abs(audio_data))
        
        # √Åp d·ª•ng high-pass filter ƒë·ªÉ lo·∫°i b·ªè noise t·∫ßn s·ªë th·∫•p
        from scipy.signal import butter, filtfilt
        
        # Thi·∫øt k·∫ø high-pass filter
        nyquist = sample_rate / 2
        low_cutoff = 80  # Hz
        high_cutoff = low_cutoff / nyquist
        
        b, a = butter(4, high_cutoff, btype='high')
        filtered_audio = filtfilt(b, a, audio_data)
        
        return filtered_audio
    
    def process_file(self, input_path, output_path=None, method='center', enhance=True):
        """
        X·ª≠ l√Ω file audio ƒë·ªÉ lo·∫°i b·ªè vocal
        
        Args:
            input_path: ƒë∆∞·ªùng d·∫´n file input
            output_path: ƒë∆∞·ªùng d·∫´n file output (optional)
            method: ph∆∞∆°ng ph√°p ('center' ho·∫∑c 'spectral')
            enhance: c√≥ c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng audio kh√¥ng
        """
        input_path = Path(input_path)
        
        # Ki·ªÉm tra file t·ªìn t·∫°i
        if not input_path.exists():
            raise FileNotFoundError(f"File kh√¥ng t·ªìn t·∫°i: {input_path}")
        
        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
        if input_path.suffix.lower() not in self.supported_formats:
            raise ValueError(f"ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {input_path.suffix}")
        
        print(f"üéµ ƒêang x·ª≠ l√Ω: {input_path.name}")
        
        # ƒê·ªçc file audio
        try:
            audio_data, sample_rate = librosa.load(input_path, sr=None, mono=False)
            print(f"üìä Sample rate: {sample_rate} Hz")
            print(f"üìä Channels: {audio_data.shape[0] if len(audio_data.shape) > 1 else 1}")
            print(f"üìä Duration: {audio_data.shape[-1] / sample_rate:.2f} seconds")
        except Exception as e:
            raise Exception(f"L·ªói khi ƒë·ªçc file audio: {e}")
        
        # Lo·∫°i b·ªè vocal
        if method == 'center':
            processed_audio = self.remove_vocals_center_channel(audio_data, sample_rate)
        elif method == 'spectral':
            processed_audio = self.remove_vocals_spectral(audio_data, sample_rate)
        else:
            raise ValueError("Method ph·∫£i l√† 'center' ho·∫∑c 'spectral'")
        
        # C·∫£i thi·ªán ch·∫•t l∆∞·ª£ng audio
        if enhance:
            print("‚ú® ƒêang c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng audio...")
            processed_audio = self.enhance_audio(processed_audio, sample_rate)
        
        # T·∫°o t√™n file output
        if output_path is None:
            output_path = input_path.parent / f"{input_path.stem}_no_vocal{input_path.suffix}"
        else:
            output_path = Path(output_path)
        
        # L∆∞u file
        try:
            sf.write(output_path, processed_audio, sample_rate)
            print(f"‚úÖ ƒê√£ l∆∞u file: {output_path}")
            print(f"üìÅ K√≠ch th∆∞·ªõc: {output_path.stat().st_size / 1024 / 1024:.2f} MB")
        except Exception as e:
            raise Exception(f"L·ªói khi l∆∞u file: {e}")
        
        return str(output_path)
    
    def batch_process(self, input_folder, output_folder=None, method='center', enhance=True):
        """
        X·ª≠ l√Ω h√†ng lo·∫°t file trong th∆∞ m·ª•c
        
        Args:
            input_folder: th∆∞ m·ª•c ch·ª©a file input
            output_folder: th∆∞ m·ª•c output (optional)
            method: ph∆∞∆°ng ph√°p lo·∫°i b·ªè vocal
            enhance: c√≥ c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng kh√¥ng
        """
        input_folder = Path(input_folder)
        
        if not input_folder.exists():
            raise FileNotFoundError(f"Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {input_folder}")
        
        # T√¨m t·∫•t c·∫£ file audio
        audio_files = []
        for ext in self.supported_formats:
            audio_files.extend(input_folder.glob(f"*{ext}"))
            audio_files.extend(input_folder.glob(f"*{ext.upper()}"))
        
        if not audio_files:
            print("‚ùå Kh√¥ng t√¨m th·∫•y file audio n√†o!")
            return
        
        print(f"üîç T√¨m th·∫•y {len(audio_files)} file audio")
        
        # T·∫°o th∆∞ m·ª•c output
        if output_folder is None:
            output_folder = input_folder / "no_vocal"
        else:
            output_folder = Path(output_folder)
        
        output_folder.mkdir(exist_ok=True)
        
        # X·ª≠ l√Ω t·ª´ng file
        successful = 0
        failed = 0
        
        for i, audio_file in enumerate(audio_files, 1):
            try:
                print(f"\n[{i}/{len(audio_files)}] ", end="")
                output_path = output_folder / f"{audio_file.stem}_no_vocal{audio_file.suffix}"
                self.process_file(audio_file, output_path, method, enhance)
                successful += 1
            except Exception as e:
                print(f"‚ùå L·ªói x·ª≠ l√Ω {audio_file.name}: {e}")
                failed += 1
        
        print(f"\nüìä K·∫øt qu·∫£: {successful} th√†nh c√¥ng, {failed} th·∫•t b·∫°i")

def simple_gui():
    """
    Giao di·ªán ƒë∆°n gi·∫£n ƒë·ªÉ ch·ªçn file
    """
    try:
        import tkinter as tk
        from tkinter import filedialog, messagebox, ttk
        
        def select_input_file():
            file_path = filedialog.askopenfilename(
                title="Ch·ªçn file nh·∫°c",
                filetypes=[
                    ("Audio files", "*.mp3 *.wav *.flac *.m4a *.ogg"),
                    ("MP3 files", "*.mp3"),
                    ("WAV files", "*.wav"),
                    ("All files", "*.*")
                ]
            )
            if file_path:
                input_var.set(file_path)
        
        def select_output_file():
            file_path = filedialog.asksaveasfilename(
                title="Ch·ªçn n∆°i l∆∞u file",
                defaultextension=".wav",
                filetypes=[
                    ("WAV files", "*.wav"),
                    ("MP3 files", "*.mp3"),
                    ("All files", "*.*")
                ]
            )
            if file_path:
                output_var.set(file_path)
        
        def process_audio():
            input_path = input_var.get()
            if not input_path:
                messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn file input!")
                return
            
            output_path = output_var.get() if output_var.get() else None
            method = method_var.get()
            enhance = enhance_var.get()
            
            try:
                progress_bar.start()
                process_btn.config(state='disabled')
                root.update()
                
                remover = VocalRemover()
                result = remover.process_file(input_path, output_path, method, enhance)
                
                progress_bar.stop()
                process_btn.config(state='normal')
                
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ x·ª≠ l√Ω xong!\nFile l∆∞u t·∫°i: {result}")
                
            except Exception as e:
                progress_bar.stop()
                process_btn.config(state='normal')
                messagebox.showerror("L·ªói", str(e))
        
        # T·∫°o window
        root = tk.Tk()
        root.title("Vocal Remover Tool")
        root.geometry("600x400")
        
        # Variables
        input_var = tk.StringVar()
        output_var = tk.StringVar()
        method_var = tk.StringVar(value="center")
        enhance_var = tk.BooleanVar(value=True)
        
        # Main frame
        main_frame = ttk.Frame(root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Input file
        ttk.Label(main_frame, text="File nh·∫°c input:").grid(row=0, column=0, sticky=tk.W, pady=5)
        ttk.Entry(main_frame, textvariable=input_var, width=50).grid(row=1, column=0, pady=5)
        ttk.Button(main_frame, text="Ch·ªçn file", command=select_input_file).grid(row=1, column=1, padx=(5,0), pady=5)
        
        # Output file
        ttk.Label(main_frame, text="File output (ƒë·ªÉ tr·ªëng = t·ª± ƒë·ªông):").grid(row=2, column=0, sticky=tk.W, pady=5)
        ttk.Entry(main_frame, textvariable=output_var, width=50).grid(row=3, column=0, pady=5)
        ttk.Button(main_frame, text="Ch·ªçn n∆°i l∆∞u", command=select_output_file).grid(row=3, column=1, padx=(5,0), pady=5)
        
        # Method
        ttk.Label(main_frame, text="Ph∆∞∆°ng ph√°p:").grid(row=4, column=0, sticky=tk.W, pady=5)
        method_frame = ttk.Frame(main_frame)
        method_frame.grid(row=5, column=0, sticky=tk.W, pady=5)
        ttk.Radiobutton(method_frame, text="Center Channel (nhanh)", variable=method_var, value="center").pack(side=tk.LEFT)
        ttk.Radiobutton(method_frame, text="Spectral (ch·∫•t l∆∞·ª£ng cao)", variable=method_var, value="spectral").pack(side=tk.LEFT, padx=(20,0))
        
        # Enhance option
        ttk.Checkbutton(main_frame, text="C·∫£i thi·ªán ch·∫•t l∆∞·ª£ng audio", variable=enhance_var).grid(row=6, column=0, sticky=tk.W, pady=10)
        
        # Process button
        process_btn = ttk.Button(main_frame, text="B·∫Øt ƒë·∫ßu x·ª≠ l√Ω", command=process_audio)
        process_btn.grid(row=7, column=0, pady=20)
        
        # Progress bar
        progress_bar = ttk.Progressbar(main_frame, mode='indeterminate')
        progress_bar.grid(row=8, column=0, sticky=(tk.W, tk.E), pady=10)
        
        # Instructions
        instructions = """
        H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:
        1. Ch·ªçn file nh·∫°c c·∫ßn lo·∫°i b·ªè vocal
        2. Ch·ªçn n∆°i l∆∞u file (ho·∫∑c ƒë·ªÉ tr·ªëng ƒë·ªÉ t·ª± ƒë·ªông t·∫°o t√™n)
        3. Ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω
        4. Click "B·∫Øt ƒë·∫ßu x·ª≠ l√Ω"
        
        L∆∞u √Ω: Hi·ªáu qu·∫£ t·ªët nh·∫•t v·ªõi nh·∫°c stereo c√≥ vocal ·ªü center
        """
        ttk.Label(main_frame, text=instructions, justify=tk.LEFT, foreground="gray").grid(row=9, column=0, columnspan=2, pady=20)
        
        root.columnconfigure(0, weight=1)
        root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        
        root.mainloop()
        
    except ImportError:
        print("‚ùå Kh√¥ng th·ªÉ import tkinter. Vui l√≤ng c√†i ƒë·∫∑t tkinter ho·∫∑c s·ª≠ d·ª•ng command line.")
        return False
    
    return True

def main():
    # Ki·ªÉm tra xem c√≥ arguments kh√¥ng
    import sys
    if len(sys.argv) == 1:
        # Kh√¥ng c√≥ arguments, ch·∫°y GUI
        print("üéµ Kh·ªüi ƒë·ªông giao di·ªán...")
        if not simple_gui():
            # N·∫øu GUI kh√¥ng ch·∫°y ƒë∆∞·ª£c, ch·∫°y demo
            demo_mode()
        return 0
    
    parser = argparse.ArgumentParser(description="Vocal Remover Tool - Lo·∫°i b·ªè gi·ªçng h√°t kh·ªèi file nh·∫°c")
    
    parser.add_argument("input", help="File audio ho·∫∑c th∆∞ m·ª•c input")
    parser.add_argument("-o", "--output", help="File ho·∫∑c th∆∞ m·ª•c output")
    parser.add_argument("-m", "--method", choices=['center', 'spectral'], 
                       default='center', help="Ph∆∞∆°ng ph√°p lo·∫°i b·ªè vocal (default: center)")
    parser.add_argument("--no-enhance", action="store_true", 
                       help="Kh√¥ng c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng audio")
    parser.add_argument("-b", "--batch", action="store_true", 
                       help="X·ª≠ l√Ω h√†ng lo·∫°t file trong th∆∞ m·ª•c")
    
    args = parser.parse_args()
    
    # Kh·ªüi t·∫°o vocal remover
    remover = VocalRemover()
    
    try:
        if args.batch or os.path.isdir(args.input):
            # Batch processing
            remover.batch_process(
                input_folder=args.input,
                output_folder=args.output,
                method=args.method,
                enhance=not args.no_enhance
            )
        else:
            # Single file processing
            output_file = remover.process_file(
                input_path=args.input,
                output_path=args.output,
                method=args.method,
                enhance=not args.no_enhance
            )
            print(f"\nüéâ Ho√†n th√†nh! File ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {output_file}")
            
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return 1
    
    return 0

def demo_mode():
    """
    Ch·∫ø ƒë·ªô demo khi kh√¥ng c√≥ GUI
    """
    print("üéµ VOCAL REMOVER TOOL - DEMO MODE")
    print("=" * 50)
    
    # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    print("ƒê·ªÉ s·ª≠ d·ª•ng tool n√†y, b·∫°n c√≥ th·ªÉ:")
    print("\n1. S·ª≠ d·ª•ng trong code Python:")
    print("""
from vocal_remover import VocalRemover

remover = VocalRemover()
output_file = remover.process_file("input_song.mp3", method='center', enhance=True)
    """)
    
    print("\n2. S·ª≠ d·ª•ng command line:")
    print("python remover.py input_song.mp3 -o output_song.wav")
    print("python remover.py /path/to/music/folder -b")
    
    print("\n3. Hardcode ƒë·ªÉ test:")
    
    # T√¨m file audio trong th∆∞ m·ª•c hi·ªán t·∫°i ƒë·ªÉ demo
    current_dir = Path(".")
    audio_files = []
    for ext in ['.mp3', '.wav', '.flac', '.m4a', '.ogg']:
        audio_files.extend(current_dir.glob(f"*{ext}"))
        audio_files.extend(current_dir.glob(f"*{ext.upper()}"))
    
    if audio_files:
        print(f"\nüîç T√¨m th·∫•y {len(audio_files)} file audio trong th∆∞ m·ª•c hi·ªán t·∫°i:")
        for i, file in enumerate(audio_files[:5], 1):  # Ch·ªâ hi·ªÉn th·ªã 5 file ƒë·∫ßu
            print(f"   {i}. {file.name}")
        
        choice = input(f"\nNh·∫≠p s·ªë file mu·ªën x·ª≠ l√Ω (1-{min(5, len(audio_files))}) ho·∫∑c Enter ƒë·ªÉ b·ªè qua: ")
        
        if choice.isdigit() and 1 <= int(choice) <= len(audio_files):
            selected_file = audio_files[int(choice) - 1]
            print(f"\nüéµ ƒêang x·ª≠ l√Ω: {selected_file.name}")
            
            try:
                remover = VocalRemover()
                output_file = remover.process_file(str(selected_file), method='center', enhance=True)
                print(f"\nüéâ Ho√†n th√†nh! File ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {output_file}")
            except Exception as e:
                print(f"‚ùå L·ªói: {e}")
    else:
        print("\n‚ùå Kh√¥ng t√¨m th·∫•y file audio n√†o trong th∆∞ m·ª•c hi·ªán t·∫°i")
        print("Vui l√≤ng copy file nh·∫°c v√†o th∆∞ m·ª•c n√†y v√† ch·∫°y l·∫°i")

if __name__ == "__main__":
    exit(main())